{
  "x-generator": "NSwag v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v12.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Identity_Storage_Controllers_Api_IdentityProviders_IdentityProviders",
    "contact": {
      "name": "OSIsoft Cloud Services",
      "url": "https://cloud.osisoft.com",
      "email": "cloudservices@osisoft.com"
    },
    "version": "20210115.08"
  },
  "paths": {
    "/api/v1/IdentityProviders/{identityProviderId}": {
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Returns an IdentityProvider object.",
        "operationId": "IdentityProviders_GetIdentityProvider",
        "parameters": [
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Id of provider.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Identity Provider specified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProvider"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Identity Provider not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-authorized-roles": [
          "Account Member"
        ]
      },
      "head": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Get header for an identity provider to check if the identity provider exists.",
        "operationId": "IdentityProviders_GetIdentityProviderHeader",
        "parameters": [
          {
            "name": "identityProviderId",
            "in": "path",
            "required": true,
            "description": "Id of provider.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Identity Provider found."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "IdentityProvider or Tenant not found."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "x-authorized-roles": [
          "Account Administrator"
        ]
      }
    },
    "/api/v1/IdentityProviders/schemes/{scheme}": {
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Returns a list of IdentityProvider objects that follow a scheme.",
        "operationId": "IdentityProviders_GetIdentityProviderByScheme",
        "parameters": [
          {
            "name": "scheme",
            "in": "path",
            "required": true,
            "description": "Scheme name.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Identity Provider specified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProvider"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Identity Provider not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-authorized-roles": [
          "Account Member"
        ]
      },
      "head": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Get header for a scheme to check its validity.",
        "operationId": "IdentityProviders_GetIdentityProviderSchemeHeader",
        "parameters": [
          {
            "name": "scheme",
            "in": "path",
            "required": true,
            "description": "Scheme name.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Identity Provider found."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Identity Provider not found."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "x-authorized-roles": [
          "Account Administrator"
        ]
      }
    },
    "/api/v1/IdentityProviders": {
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Returns a list of IdentityProvider objects.",
        "operationId": "IdentityProviders_GetIdentityProviders",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Query to execute. Currently not supported.",
            "schema": {
              "type": "string",
              "default": "",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of providers to skip.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 2
          },
          {
            "name": "count",
            "in": "query",
            "description": "Maximum number of providers to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Identity Providers found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityProvider"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-authorized-roles": [
          "Account Member"
        ]
      },
      "head": {
        "tags": [
          "IdentityProviders"
        ],
        "summary": "Get header for Identity Providers to get the total number of Identity Providers.",
        "operationId": "IdentityProviders_GetIdentityProvidersHeader",
        "responses": {
          "200": {
            "description": "Headers for Identity Providers found."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Tenant not found."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "x-authorized-roles": [
          "Account Administrator"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "IdentityProvider": {
        "type": "object",
        "description": "The model for an Identity Provider in Identity Storage.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Gets or sets id of an identity provider.",
            "format": "guid"
          },
          "DisplayName": {
            "type": "string",
            "description": "Gets or sets identity provider display name to use.",
            "nullable": true
          },
          "Scheme": {
            "type": "string",
            "description": "Gets or sets the name of the cookie handler that will temporarily store the outcome of the external authentication.",
            "nullable": true
          },
          "UserIdClaimType": {
            "type": "string",
            "description": "Gets or sets type of claim.",
            "nullable": true
          },
          "ClientId": {
            "type": "string",
            "description": "Gets or sets the ClientId of the identity provider.",
            "nullable": true
          },
          "IsConfigured": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether the identity provider has been configured."
          },
          "Capabilities": {
            "description": "Gets or sets the Capabilities of the identity provider.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/IdentityProviderCapabilities"
              }
            ]
          }
        }
      },
      "IdentityProviderCapabilities": {
        "type": "object",
        "description": "The model for the Capabilities of an Identity Provider in Identity Storage.",
        "additionalProperties": false,
        "properties": {
          "User": {
            "description": "Gets or sets user level capabilities",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/IdentityProviderUserCapabilites"
              }
            ]
          },
          "Group": {
            "description": "Gets or sets group level capabilities",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/IdentityProviderGroupCapabilites"
              }
            ]
          }
        }
      },
      "IdentityProviderUserCapabilites": {
        "type": "object",
        "description": "The model for the user level capabilities of an Identity Provider in Identity Storage.",
        "additionalProperties": false,
        "properties": {
          "SignIn": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether user sign-in is supported."
          },
          "Invitation": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether authorization via the invitation flow is supported."
          },
          "Search": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether user search is supported."
          }
        }
      },
      "IdentityProviderGroupCapabilites": {
        "type": "object",
        "description": "The model for the group level capabilities of an Identity Provider in Identity Storage.",
        "additionalProperties": false,
        "properties": {
          "Authorize": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether authorization via groups is supported."
          },
          "Search": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether group search is supported."
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "description": "Object returned whenever there is an error.",
        "example": {
          "OperationId": "1b2af18e-8b27-4f86-93e0-6caa3e59b90c",
          "Error": "Error message.",
          "Reason": "Reason that caused error.",
          "Resolution": "Possible solution for the error."
        },
        "additionalProperties": {
          "nullable": true
        },
        "required": [
          "OperationId",
          "Error",
          "Reason",
          "Resolution"
        ],
        "properties": {
          "OperationId": {
            "type": "string",
            "description": "Gets or sets operationId of action that caused the Error.",
            "minLength": 1
          },
          "Error": {
            "type": "string",
            "description": "Gets or sets error description.",
            "minLength": 1
          },
          "Reason": {
            "type": "string",
            "description": "Gets or sets reason for the Error.",
            "minLength": 1
          },
          "Resolution": {
            "type": "string",
            "description": "Gets or sets what can be done to resolve the Error.",
            "minLength": 1
          }
        }
      }
    }
  }
}