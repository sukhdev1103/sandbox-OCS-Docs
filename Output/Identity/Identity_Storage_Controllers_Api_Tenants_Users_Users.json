{
  "x-generator": "NSwag v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v12.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Identity_Storage_Controllers_Api_Tenants_Users_Users",
    "contact": {
      "name": "OSIsoft Cloud Services",
      "url": "https://cloud.osisoft.com",
      "email": "cloudservices@osisoft.com"
    },
    "version": "20210115.07"
  },
  "paths": {
    "/api/v1/Tenants/{tenantId}/Users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a list of users from a Tenant. Optionally, get a list of requested users.\n            Total number of users in the Tenant set in the Total-Count header.",
        "operationId": "Users_GetUsers",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Unordered list of User Ids to get.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string",
                "format": "guid"
              }
            },
            "x-position": 2
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query to execute. Currently not supported.",
            "schema": {
              "type": "string",
              "default": "",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of users to skip. Ignored if a list of Ids is passed.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 4
          },
          {
            "name": "count",
            "in": "query",
            "description": "Maximum number of users to return. Ignored if a list of Ids is passed.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "List of Users found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                },
                "example": [
                  {
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "GivenName": "Name",
                    "Surname": "Surname",
                    "Name": "Name",
                    "Email": "user@company.com",
                    "ContactEmail": "user@company.com",
                    "ContactGivenName": "Name",
                    "ContactSurname": "Surname",
                    "ExternalUserId": "ExternalUserId",
                    "IdentityProviderId": "00000000-0000-0000-0000-000000000000",
                    "RoleIds": [
                      "00000000-0000-0000-0000-000000000000",
                      "00000000-0000-0000-0000-000000000000"
                    ]
                  },
                  {
                    "Id": "00000000-0000-0000-0000-000000000000",
                    "GivenName": "Name",
                    "Surname": "Surname",
                    "Name": "Name",
                    "Email": "user@company.com",
                    "ContactEmail": "user@company.com",
                    "ContactGivenName": "Name",
                    "ContactSurname": "Surname",
                    "ExternalUserId": "ExternalUserId",
                    "IdentityProviderId": "00000000-0000-0000-0000-000000000000",
                    "RoleIds": [
                      "00000000-0000-0000-0000-000000000000",
                      "00000000-0000-0000-0000-000000000000"
                    ]
                  }
                ]
              }
            }
          },
          "207": {
            "description": "List of Users found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMultiStatusResponse"
                },
                "example": {
                  "OperationId": "OperationId",
                  "Error": "Error",
                  "Reason": "Reason",
                  "ChildErrors": [
                    {
                      "StatusCode": 0,
                      "ModelId": "ModelId",
                      "OperationId": "OperationId",
                      "Error": "Error",
                      "Reason": "Reason",
                      "Resolution": "Resolution"
                    },
                    {
                      "StatusCode": 0,
                      "ModelId": "ModelId",
                      "OperationId": "OperationId",
                      "Error": "Error",
                      "Reason": "Reason",
                      "Resolution": "Resolution"
                    }
                  ],
                  "Data": [
                    {
                      "Id": "00000000-0000-0000-0000-000000000000",
                      "GivenName": "Name",
                      "Surname": "Surname",
                      "Name": "Name",
                      "Email": "user@company.com",
                      "ContactEmail": "user@company.com",
                      "ContactGivenName": "Name",
                      "ContactSurname": "Surname",
                      "ExternalUserId": "ExternalUserId",
                      "IdentityProviderId": "00000000-0000-0000-0000-000000000000",
                      "RoleIds": [
                        "00000000-0000-0000-0000-000000000000",
                        "00000000-0000-0000-0000-000000000000"
                      ]
                    },
                    {
                      "Id": "00000000-0000-0000-0000-000000000000",
                      "GivenName": "Name",
                      "Surname": "Surname",
                      "Name": "Name",
                      "Email": "user@company.com",
                      "ContactEmail": "user@company.com",
                      "ContactGivenName": "Name",
                      "ContactSurname": "Surname",
                      "ExternalUserId": "ExternalUserId",
                      "IdentityProviderId": "00000000-0000-0000-0000-000000000000",
                      "RoleIds": [
                        "00000000-0000-0000-0000-000000000000",
                        "00000000-0000-0000-0000-000000000000"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "OperationId": "1b2af18e-8b27-4f86-93e0-6caa3e59b90c",
                  "Error": "Error message.",
                  "Reason": "Reason that caused error.",
                  "Resolution": "Possible solution for the error."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-authorized-roles": [
          "Account Member"
        ],
        "x-strict-roles": [
          "Account Administrator"
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a User in the Tenant. This endpoint does not create an invitation for the User.\n            You will need to create an invitation in the respective endpoint for this User, otherwise\n            they will not be able to finish the sign-up process. Users have unique Ids in a Tenant.\n            Currently there is a limit of 50000 users per Tenant.\n            For Windows Active Directory users, the externalUserId must be specified.",
        "operationId": "Users_CreateUser",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "userCreateOrUpdate",
          "description": "UserCreateOrUpdate object.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UserCreateOrUpdate"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "User created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs, or the User limit exceeded for Tenant.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-authorized-roles": [
          "Account Administrator"
        ]
      },
      "head": {
        "tags": [
          "Users"
        ],
        "summary": "Return total number of users in a Tenant. Optionally, check based on a list of requested users.\n            The value will be set in the Total-Count header. This endpoint is identical to the GET one but\n            it does not return any objects in the body.",
        "operationId": "Users_GetUsersHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Unordered list of User Ids.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string",
                "format": "guid"
              }
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "User Header found."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "User not found."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "x-authorized-roles": [
          "Account Member"
        ],
        "x-strict-roles": [
          "Account Administrator"
        ]
      }
    },
    "/api/v1/Tenants/{tenantId}/Users/Status": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get invitation statuses for multiple users. Optionally restrict it only to users of a specific invitation status. The User status can be: InvitationAccepted (0),  NoInvitation (1), InvitationNotSent (2), InvitationSent (3), InvitationExpired (4).",
        "operationId": "Users_GetUsersStatus",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Unordered list of User Ids to get.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string",
                "format": "guid"
              }
            },
            "x-position": 2
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query to execute. Currently not supported.",
            "schema": {
              "type": "string",
              "default": "",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of users to skip. Ignored if a list of Ids is passed.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 4
          },
          {
            "name": "count",
            "in": "query",
            "description": "Maximum number of users to return. Ignored if a list of Ids is passed.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 5
          },
          {
            "name": "status",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Only return statuses that match these values. Possible User statuses are: InvitationAccepted, NoInvitation, InvitationNotSent, InvitationSent, InvitationExpired.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "List of User Statuses found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserStatus"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs. Test",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-authorized-roles": [
          "Account Member"
        ],
        "x-strict-roles": [
          "Account Administrator"
        ]
      }
    },
    "/api/v1/Tenants/{tenantId}/Users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a User from Tenant.",
        "operationId": "Users_GetUserModel",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "Id of User.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "User specified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-authorized-roles": [
          "Account Member",
          "Self"
        ],
        "x-strict-roles": [
          "Account Administrator"
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update a User in a Tenant. The Id of a User cannot be changed.",
        "operationId": "Users_UpdateUser",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "Id of User.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "userCreateOrUpdate",
          "description": "UserCreateOrUpdate object. Properties that are not set or are null will not be changed.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UserCreateOrUpdate"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Updated User.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-authorized-roles": [
          "Account Administrator"
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a User. Users cannot delete themselves. Deleting a User does not invalidate any of the\n            existing access tokens, but it prevents this User from being able to authenticate in the future.\n            Existing access tokens for the User will be valid until their expiration date. Refresh tokens on\n            behalf of the User will no longer be valid after the User has been deleted. Deleting a user with \n            explicit and claim role mappings will only have their explicit roles deleted. Forcibly deleting a user\n            will delete a user completely regardless of claim role mappings.",
        "operationId": "Users_DeleteUser",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "Id of User.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "force",
            "in": "query",
            "description": "Forcibly delete a User that can remain due to claim role mappings.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "No content.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "No content."
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-authorized-roles": [
          "Account Administrator"
        ]
      },
      "head": {
        "tags": [
          "Users"
        ],
        "summary": "Validate that a User exists. This endpoint is identical to the GET\n            one, but it does not return an object in the body.",
        "operationId": "Users_GetUserHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "Id of User.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Header for User."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "User does not exist."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "x-authorized-roles": [
          "Account Member",
          "Self"
        ],
        "x-strict-roles": [
          "Account Administrator"
        ]
      }
    },
    "/api/v1/Tenants/{tenantId}/Users/{userId}/Status": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get invitation status for a User. It can be: InvitationAccepted (0),\n            NoInvitation (1), InvitationNotSent (2), InvitationSent (3), InvitationExpired (4).",
        "operationId": "Users_GetUserStatus",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "Id of User.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "User Status for User specified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-authorized-roles": [
          "Account Member",
          "Self"
        ],
        "x-strict-roles": [
          "Account Administrator"
        ]
      }
    },
    "/api/v1/Tenants/{tenantId}/Users/{userId}/Preferences": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get preferences from a User. User preferences can be any valid\n            JSON object. A common use case is to store UI preferences for the User.",
        "operationId": "Users_GetUserPreferences",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "Id of User.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "User Preferences for specified User.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-authorized-roles": [
          "Account Administrator",
          "Self"
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update preferences for a User.",
        "operationId": "Users_UpdateUserPreferences",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "Id of User.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "preferences",
          "description": "JSON object preferences.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Updated User Preferences.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Missing preferences.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-authorized-roles": [
          "Account Administrator",
          "Self"
        ]
      },
      "head": {
        "tags": [
          "Users"
        ],
        "summary": "Validate that there are preferences for a User. This endpoint is identical\n            to the GET one but it does not return any objects in the body.",
        "operationId": "Users_GetUserPreferencesHeader",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "Id of User.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Header for specified User\u0027s Preferences."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "User or Tenant not found."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "x-authorized-roles": [
          "Account Administrator",
          "Self"
        ]
      }
    },
    "/api/v1-preview/Tenants/{tenantId}/Users/Ids": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns an ordered list of User objects based on userId for a given tenant or a MultiStatusResponse with a list of User objects and a list of errors.",
        "operationId": "Users_GetV1PreviewUsersByIds",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Unordered list of ids for all users to get.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string",
                "format": "guid"
              }
            },
            "x-position": 2
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query to execute. Currently not supported.",
            "schema": {
              "type": "string",
              "default": "",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Items to skip. Currently not supported.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 4
          },
          {
            "name": "count",
            "in": "query",
            "description": "Maximum items to return. Currently not supported.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "List of Users found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "207": {
            "description": "List of Users found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMultiStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-authorized-roles": [
          "Account Administrator"
        ]
      }
    },
    "/api/v1-preview/Tenants/{tenantId}/Users/Status/Ids": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns an ordered list of UserStatus objects for a given tenant or a MultiStatusResponse with a list of UserStatus objects and a list of errors.",
        "operationId": "Users_GetV1PreviewUsersStatusByIds",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "Unordered list of ids for all users.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string",
                "format": "guid"
              }
            },
            "x-position": 2
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query to execute. Currently not supported.",
            "schema": {
              "type": "string",
              "default": "",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Items to skip. Currently not supported.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 4
          },
          {
            "name": "count",
            "in": "query",
            "description": "Maximum number of items to retrieve. Currently not supported.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "List of User Statuses found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserStatus"
                  }
                }
              }
            }
          },
          "207": {
            "description": "List of User Statuses found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserStatusMultiStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-authorized-roles": [
          "Account Administrator"
        ]
      }
    },
    "/api/v1-preview/Tenants/{tenantId}/Users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Creates a \u0060User\u0060 .",
        "operationId": "Users_CreateV1PreviewUser",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "userCreateOrUpdate",
          "description": "User values to use during creating.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UserCreateOrUpdate2"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "User created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs, or User limit exceeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-authorized-roles": [
          "Account Administrator"
        ]
      }
    },
    "/api/v1-preview/Tenants/{tenantId}/Users/{userId}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Create or Update a User.",
        "operationId": "Users_UpdateV1PreviewUser",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "description": "Id of Tenant.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "Id of user.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "userCreateOrUpdate",
          "description": "A UserStatus object.",
          "content": {
            "application/json": {
              "schema": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UserCreateOrUpdate2"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Updated User.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid inputs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User or Tenant not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Operation timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-authorized-roles": [
          "Account Administrator"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "description": "Object for retrieving a User.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Gets or sets unique User ID.",
            "format": "guid"
          },
          "GivenName": {
            "type": "string",
            "description": "Gets or sets given name of user.",
            "nullable": true
          },
          "Surname": {
            "type": "string",
            "description": "Gets or sets surname of user.",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "Gets or sets name of user.",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Gets or sets email of user.",
            "nullable": true
          },
          "ContactEmail": {
            "type": "string",
            "description": "Gets or sets contact email for user. User will only be contacted\nthrough this email.",
            "nullable": true
          },
          "ContactGivenName": {
            "type": "string",
            "description": "Gets or sets preferred contact name for user.",
            "nullable": true
          },
          "ContactSurname": {
            "type": "string",
            "description": "Gets or sets preferred contact surname for user.",
            "nullable": true
          },
          "ExternalUserId": {
            "type": "string",
            "description": "Gets or sets provider id for user. This is the unique ID we\nget from the Identity Provider.",
            "nullable": true
          },
          "IdentityProviderId": {
            "type": "string",
            "description": "Gets or sets Identity Provider Id used to authenticate User.\nWill be set once the User accepts an invitation.\nIf not specified when sending the invitation to\nthe User, it can be any of the Identity Provider\nIds configured for this Tenant.",
            "format": "guid",
            "nullable": true
          },
          "RoleIds": {
            "type": "array",
            "description": "Gets or sets list of strings of RoleIds.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid"
            }
          }
        }
      },
      "UserMultiStatusResponse": {
        "type": "object",
        "description": "MultiStatusResponse objects returned in a 207 response.",
        "additionalProperties": false,
        "properties": {
          "OperationId": {
            "type": "string",
            "description": "Gets or sets operationId that resulted in this error.",
            "nullable": true
          },
          "Error": {
            "type": "string",
            "description": "Gets or sets string message describing the error.",
            "nullable": true
          },
          "Reason": {
            "type": "string",
            "description": "Gets or sets reason that caused the error.",
            "nullable": true
          },
          "ChildErrors": {
            "type": "array",
            "description": "Gets or sets list of ChildErrors.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/MultiStatusResponseChildError"
            }
          },
          "Data": {
            "type": "array",
            "description": "Gets or sets data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "MultiStatusResponseChildError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponse"
          },
          {
            "type": "object",
            "description": "ChildError objects returned in a 207 response.",
            "additionalProperties": {
              "nullable": true
            },
            "properties": {
              "StatusCode": {
                "type": "integer",
                "description": "Gets or sets hTTP status code.",
                "format": "int32"
              },
              "ModelId": {
                "type": "string",
                "description": "Gets or sets model ID.",
                "nullable": true
              }
            }
          }
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "description": "Object returned whenever there is an error.",
        "example": {
          "OperationId": "1b2af18e-8b27-4f86-93e0-6caa3e59b90c",
          "Error": "Error message.",
          "Reason": "Reason that caused error.",
          "Resolution": "Possible solution for the error."
        },
        "additionalProperties": {
          "nullable": true
        },
        "required": [
          "OperationId",
          "Error",
          "Reason",
          "Resolution"
        ],
        "properties": {
          "OperationId": {
            "type": "string",
            "description": "Gets or sets operationId of action that caused the Error.",
            "minLength": 1
          },
          "Error": {
            "type": "string",
            "description": "Gets or sets error description.",
            "minLength": 1
          },
          "Reason": {
            "type": "string",
            "description": "Gets or sets reason for the Error.",
            "minLength": 1
          },
          "Resolution": {
            "type": "string",
            "description": "Gets or sets what can be done to resolve the Error.",
            "minLength": 1
          }
        }
      },
      "UserStatus": {
        "type": "object",
        "description": "Object used when getting User status.",
        "additionalProperties": false,
        "properties": {
          "InvitationStatus": {
            "description": "Gets or sets status of user invitation. Can be: InvitationAccepted (0),  NoInvitation (1), InvitationNotSent (2), InvitationSent (3), InvitationExpired (4).",
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserInvitationStatus"
              }
            ]
          },
          "User": {
            "description": "Gets or sets user information.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ]
          }
        }
      },
      "UserInvitationStatus": {
        "type": "integer",
        "description": "User Invitation Status.",
        "x-enumNames": [
          "InvitationAccepted",
          "NoInvitation",
          "InvitationNotSent",
          "InvitationSent",
          "InvitationExpired"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "UserCreateOrUpdate": {
        "type": "object",
        "description": "Object when updating an User.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "Gets or sets user Id for the user. When creating a user, if User ID is not specified, one will be generated.",
            "format": "guid",
            "nullable": true
          },
          "ExternalUserId": {
            "type": "string",
            "description": "Gets or sets user ExternalUserId for the user. Must be specified if Identity Provider is Windows Active Directory.",
            "nullable": true
          },
          "ContactGivenName": {
            "type": "string",
            "description": "Gets or sets preferred name to be used when contacting user.",
            "maxLength": 48,
            "minLength": 0,
            "nullable": true
          },
          "ContactSurname": {
            "type": "string",
            "description": "Gets or sets preferred surname to be used when contacting user.",
            "maxLength": 48,
            "minLength": 0,
            "nullable": true
          },
          "ContactEmail": {
            "type": "string",
            "description": "Gets or sets preferred contact email to be used. This does not have to be the same as the user\u0027s Identity Provider email.",
            "format": "email",
            "nullable": true
          },
          "IdentityProviderId": {
            "type": "string",
            "description": "Gets or sets Identity Provider this user will be required to use to login.  If null, the Identity Provider Id will\nbe set when creating the Invitation.",
            "format": "guid",
            "nullable": true
          },
          "IdentityProviderSpecificUserId": {
            "type": "string",
            "description": "Identity Provider Specific User Id. Ex. ObjectId for AD and AAD.",
            "nullable": true
          },
          "RoleIds": {
            "type": "array",
            "description": "Gets or sets list of strings of RoleIds.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid"
            }
          }
        }
      },
      "UserStatusMultiStatusResponse": {
        "type": "object",
        "description": "MultiStatusResponse objects returned in a 207 response.",
        "additionalProperties": false,
        "properties": {
          "OperationId": {
            "type": "string",
            "description": "Gets or sets operationId that resulted in this error.",
            "nullable": true
          },
          "Error": {
            "type": "string",
            "description": "Gets or sets string message describing the error.",
            "nullable": true
          },
          "Reason": {
            "type": "string",
            "description": "Gets or sets reason that caused the error.",
            "nullable": true
          },
          "ChildErrors": {
            "type": "array",
            "description": "Gets or sets list of ChildErrors.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/MultiStatusResponseChildError"
            }
          },
          "Data": {
            "type": "array",
            "description": "Gets or sets data.\n            ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UserStatus"
            }
          }
        }
      },
      "UserCreateOrUpdate2": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "UserId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "ContactGivenName": {
            "type": "string",
            "maxLength": 48,
            "minLength": 0,
            "nullable": true
          },
          "ContactSurname": {
            "type": "string",
            "maxLength": 48,
            "minLength": 0,
            "nullable": true
          },
          "ContactEmail": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "RoleIds": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid"
            }
          }
        }
      }
    }
  }
}